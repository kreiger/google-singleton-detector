#summary A guide to understanding the graphs generated by GSD.
#labels Featured

= Understanding the Graph =

Once you have a graph open and have applied a layout, you'll see a collection
of colorful nodes and arrows.  If you're running this on a small codebase or
one with little use of global state, hopefully you'll see only a few nodes.
If you see a large tangle of lines and colors, don't worry, yEd makes it easy
to work with.

There are six different types of nodes:

|| Color || Class || Description ||
|| Red || [Singleton] || A class for which there should only be one instance in the entire system at any given time. This program detects singletons which enforce their own singularity, which means they keep one static instance of themselves and pass it around through a static getter method. ||
|| Orange || [Hingleton] || Derived from “helper singleton,” a class which turns another class into a singleton by enforcing that class's singularity.  ||
|| Yellow || [Mingleton] || Derived from “method singleton” a class which has any static method that returns some state without taking any parameters. ||                
|| Green || [Fingleton] || Derived from “field singleton,” a class which contains a public static field. ||
|| Light Blue (Ellipse) || Other || Any class which is directly dependent on a _ingleton. ||
|| Dark Blue || - || Displays statistics about the current codebase.  Is only drawn if the banner option (-b) is passed as a command line argument at runtime. ||

Each node contains two lines of text; the first line is the name of the class
that the node represents, and the second line is the package that class is in
(this saves horizontal space).  If the <package> argument was passed at runtime, this prefix will be omitted from the package name (again, to save
space).  Note that hingleton (orange) nodes will have an extra two lines surround by parens, which are the name and package of the class that is hingled by the hingleton (see [Hingleton] for more details).

An arrow is drawn from one node to another if the first class directly uses
the global state of the second.  In the case of singletons and hingletons,
this means that a class calls the getInstance() method of the singleton/
hingleton.  For mingletons and fingletons, this means that a class access the
non-primitive global state of another class.




